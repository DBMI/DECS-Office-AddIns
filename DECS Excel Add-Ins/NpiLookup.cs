using Microsoft.Office.Interop.Excel;
using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Web.Script.Serialization;
using Worksheet = Microsoft.Office.Interop.Excel.Worksheet;

namespace DECS_Excel_Add_Ins
{
    // classes automatically generated by https://json2csharp.com/

    public class Address
    {
        public string country_code { get; set; }
        public string country_name { get; set; }
        public string address_purpose { get; set; }
        public string address_type { get; set; }
        public string address_1 { get; set; }
        public string city { get; set; }
        public string state { get; set; }
        public string postal_code { get; set; }
        public string telephone_number { get; set; }
    }

    public class Basic
    {
        public string first_name { get; set; }
        public string last_name { get; set; }
        public string middle_name { get; set; }
        public string credential { get; set; }
        public string sole_proprietor { get; set; }
        public string sex { get; set; }
        public string enumeration_date { get; set; }
        public string last_updated { get; set; }
        public string status { get; set; }
        public string name_prefix { get; set; }
        public string name_suffix { get; set; }
    }

    public class Endpoint
    {
        public string endpointType { get; set; }
        public string endpointTypeDescription { get; set; }
        public string endpoint { get; set; }
        public string endpointDescription { get; set; }
        public string affiliation { get; set; }
        public string affiliationName { get; set; }
        public string use { get; set; }
        public string useDescription { get; set; }
        public string contentType { get; set; }
        public string contentTypeDescription { get; set; }
        public string contentOtherDescription { get; set; }
        public string country_code { get; set; }
        public string country_name { get; set; }
        public string address_type { get; set; }
        public string address_1 { get; set; }
        public string city { get; set; }
        public string state { get; set; }
        public string postal_code { get; set; }
    }

    public class Result
    {
        public string created_epoch { get; set; }
        public string enumeration_type { get; set; }
        public string last_updated_epoch { get; set; }
        public string number { get; set; }
        public List<Address> addresses { get; set; }
        public List<object> practiceLocations { get; set; }
        public Basic basic { get; set; }
        public List<Taxonomy> taxonomies { get; set; }
        public List<object> identifiers { get; set; }
        public List<Endpoint> endpoints { get; set; }
        public List<object> other_names { get; set; }

        public string Affiliation()
        {
            List<string> affiliations = new List<string>();

            foreach (Endpoint endpoint in endpoints)
            {
                affiliations.Add(endpoint.affiliationName);
            }

            return string.Join(",", affiliations);
        }

        public string Name()
        {
            string name = string.Empty;

            if (!string.IsNullOrEmpty(basic.last_name))
            {
                name += basic.last_name + ", ";
            }

            if (!string.IsNullOrEmpty(basic.first_name))
            {
                name += basic.first_name + " ";
            }

            if (!string.IsNullOrEmpty(basic.middle_name))
            {
                name += basic.middle_name + " ";
            }

            if (!string.IsNullOrEmpty(basic.credential))
            {
                name += ", " + basic.credential;
            }

            return name.Trim();
        }

        public string SoleProprietor()
        {
            return basic.sole_proprietor;
        }
    }

    public class Root
    {
        public int result_count { get; set; }
        public List<Result> results { get; set; }
    }

    public class Taxonomy
    {
        public string code { get; set; }
        public string taxonomy_group { get; set; }
        public string desc { get; set; }
        public string state { get; set; }
        public string license { get; set; }
        public bool primary { get; set; }
    }

    internal class NpiLookup
    {
        internal NpiLookup()
        {
            // https://stackoverflow.com/a/48930280/18749636
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
        }

        internal void Search(Worksheet worksheet)
        {
            Microsoft.Office.Interop.Excel.Application application = Globals.ThisAddIn.Application;

            // Any column selected?
            Range npiColumn = Utilities.GetSelectedCol(application);

            if (npiColumn != null)
            {
                // Create columns for provider info.
                Range providerNameRng = Utilities.InsertNewColumn(npiColumn, "Provider Name", InsertSide.Right);
                Range providerSoleProprietorRng = Utilities.InsertNewColumn(providerNameRng, "Sole Proprietor", InsertSide.Right);
                Range providerAffiliationRng = Utilities.InsertNewColumn(providerSoleProprietorRng, "Affiliation", InsertSide.Right);

                int rowOffset = 1;
                int lastRow = Utilities.FindLastRow(worksheet);

                while (true)
                {
                    try
                    {
                        string npi = npiColumn.Offset[rowOffset, 0].Value.ToString();

                        // "NULL" means we're still using this row. It's not actually null.
                        if (!String.Equals(npi, "NULL"))
                        {
                            Root providerInfo = PingNPI(npi);

                            if (providerInfo.result_count > 0)
                            {
                                providerNameRng.Offset[rowOffset, 0].Value = providerInfo.results[0].Name();
                                providerSoleProprietorRng.Offset[rowOffset, 0].Value = providerInfo.results[0].SoleProprietor();
                                string affiliation = providerInfo.results[0].Affiliation();
                                providerAffiliationRng.Offset[rowOffset, 0].Value = affiliation;
                                application.StatusBar = "Row: " + rowOffset.ToString() + "/" + lastRow.ToString();
                            }
                        }

                        rowOffset++;
                    }
                    catch (System.NullReferenceException)
                    {
                        break;
                    }
                    catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException)
                    {
                        break;
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine($"An unexpected error occurred: {e.Message}");
                    }
                }
            }

            application.StatusBar = "Ready";
        }

        /// <summary>
        /// Pings the NPI registry service to look up provider's info from their National Provider Identifier (NPI).
        /// https://www.cms.gov/priorities/key-initiatives/burden-reduction/administrative-simplification/unique-identifiers/npis
        /// </summary>
        /// <param name="npi">string</param>
        /// <returns>Root object</returns>
        private Root PingNPI(string npi)
        {
            Root provider = null;
            string result = string.Empty;
            string url = "https://npiregistry.cms.hhs.gov/api/?version=2.1&number=";
            string urlPopulated = url + npi;

            using (HttpClient httpClient = new HttpClient())
            {
                try
                {
                    using (HttpResponseMessage response = httpClient.GetAsync(urlPopulated).Result)
                    {
                        response.EnsureSuccessStatusCode(); // Throws an exception if the HTTP status code is not 2xx

                        string jsonString = response.Content.ReadAsStringAsync().Result;

                        // Deserialize the JSON string into a C# object.
                        var serializer = new JavaScriptSerializer();
                        serializer.MaxJsonLength = int.MaxValue;
                        provider = serializer.Deserialize<Root>(jsonString);
                    }
                }
                catch (HttpRequestException e)
                {
                    Console.WriteLine($"Request error: {e.Message}");
                }
                catch (Exception e)
                {
                    Console.WriteLine($"An unexpected error occurred: {e.Message}");
                }
            }

            return provider;
        }
    }
}
